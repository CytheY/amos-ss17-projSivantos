using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;

namespace RaspberryBackend
{
    /// <summary>
    /// This class represents a Command.
    /// It generates a status message about user controls as well as information about attached hardware components.
    /// </summary>
    public partial class Operation
    {
        private static int statusMessageCount = 0; // count messages generated by this method (currently for arbitrary reasons)

        /// <summary>
        /// Executes the Command getStatusXML()
        /// </summary>
        /// <param name="parameter"></param>
        /// <returns>
        /// The current state of the Raspberry Pi: Status of user controls, available features, hardware information.
        /// This method returns an XML-file.
        /// </returns>
        public XDocument getStatusXML()
        {

            XElement xml = new XElement("Operation",
                new XAttribute("Timestamp", DateTime.Now.ToString("hh:mm:ss")),
                new XAttribute("Message", 1),
                new XElement("IPAddress", this.GetIpAddressAsync()),
                new XElement("Initialized", RasPi.isInitialized()),
                new XElement("TestMode", RasPi.isTestMode())
            );
            /* TODO if possible: read & return currently displayed text.
             * Depending whether or not LCD is connected, status information differs. */
            if (this.LCD.isInitialized())
            {
                xml.Add(new XElement("LCD",
                    new XElement("Initialized", true),
                    new XElement("Text", this.LCD.CurrentText.ToString())));
            }
            else
            {
                xml.Add(new XElement("LCD",
                    new XElement("Initialized", false)));
            }
            if (this.Potentiometer.isInitialized())
            {
                xml.Add(new XElement("Potentiometer",
                    new XElement("Initialized", true),
                    new XElement("Text", this.Potentiometer.WiperState)));
            }
            else
            {
                xml.Add(new XElement("Potentiometer",
                    new XElement("Initialized", false)));
            }
            xml.Add(new XElement("LED",
                new XElement("Initialized", "?"), // possible to update this later on to better reflect whether or not an LED is even attached
                new XElement("Status", GPIOinterface.readPin(24)))); // gpio interface read pin led pin 24
            if (this.Multiplexer.isInitialized())
            {
                xml.Add(new XElement("Multiplexer",
                    new XElement("Initialized", true),
                    new XElement("Family", this.Multiplexer.family),
                    new XElement("ModelName", this.Multiplexer.model_name)
                ));
                /* Read config from XML and based on that return supported controls of current HI*/
                XPinConfig mux_config = HiXmlParser.getMultiplexerConfig(this.Multiplexer.family, this.Multiplexer.model_name);
                xml.Add(new XElement("HI",
                    new XElement(YPinConfig.ROCKERSWITCH_STRING, string.Join(",", mux_config.ValueToPins(YPinConfig.ROCKERSWITCH_STRING))),
                    new XElement(YPinConfig.GROUND, string.Join(",", mux_config.ValueToPins(YPinConfig.GROUND))),
                    new XElement(YPinConfig.PUSHBUTTON_STRING, string.Join(",", mux_config.ValueToPins(YPinConfig.PUSHBUTTON_STRING))),
                    new XElement(YPinConfig.AMR, string.Join(",", mux_config.ValueToPins(YPinConfig.AMR))),
                    new XElement(YPinConfig.AUDIOINPUT, string.Join(",", mux_config.ValueToPins(YPinConfig.AUDIOINPUT))),
                    new XElement(YPinConfig.REC_DET, string.Join(",", mux_config.ValueToPins(YPinConfig.REC_DET))),
                    new XElement(YPinConfig.LED, string.Join(",", mux_config.ValueToPins(YPinConfig.LED))),
                    new XElement(YPinConfig.M, string.Join(",", mux_config.ValueToPins(YPinConfig.M))),
                    new XElement(YPinConfig.STOP_END, string.Join(",", mux_config.ValueToPins(YPinConfig.STOP_END))),
                    new XElement(YPinConfig.ENDLESS_VC, string.Join(",", mux_config.ValueToPins(YPinConfig.ENDLESS_VC))),
                    new XElement(YPinConfig.ARD, string.Join(",", mux_config.ValueToPins(YPinConfig.ARD))),
                    new XElement(YPinConfig.DET_AUDIO, string.Join(",", mux_config.ValueToPins(YPinConfig.DET_AUDIO))),
                    new XElement(YPinConfig.DET_TELE, string.Join(",", mux_config.ValueToPins(YPinConfig.DET_TELE)))
                    ));
            }
            else
            {
                xml.Add(new XElement("Multiplexer",
                    new XElement("Initialized", false)
                ));
            }
            if (this.ADConverter.isInitialized())
            {
                xml.Add(new XElement("ADConverter",
                    new XElement("Initialized", true),
                    new XElement("Connected", this.ADConverter.isConnected()),
                    new XElement("Channel1", this.ADConverter.getDACVoltage1()),
                    new XElement("Channel2", this.ADConverter.getDACVoltage2())
                ));
            }
            else
            {
                xml.Add(new XElement("ADConverter",
                    new XElement("Initialized", false)
                ));
            }
            statusMessageCount++; // count send results for no particular reason other than ensuring order of status updates
            return new XDocument(new XElement(xml));
        }

        public Dictionary<string, string> getStatusDict()
        {
            /* Note: Because Serialization of Dictioniaries in C# is not supported (see: https://stackoverflow.com/questions/12554186/how-to-serialize-deserialize-to-dictionaryint-string-from-custom-xml-not-us)
             * we directly build the XML in the getStatusXML method and use the result to be transferred via API.
             * This method here is just a lazy implementation just-in-case its needed.
             * */
            Dictionary<string, string> result = getStatusXML().Root.Elements().ToDictionary(element => element.Name.LocalName, element => element.Value);
            return result;
        }
    }
}
